---
# tasks file for bagserv
- name: "Update repo cache"
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600

- name: "Upgrade packages"
  ansible.builtin.apt:
    upgrade: true

- name: "Automatically remove unused dependency packages"
  ansible.builtin.apt:
    autoremove: true

- name: "Install dependencies"
  ansible.builtin.apt:
    pkg:
      - cmake
      - libsqlite3-dev
      - git
      - g++
      - zlib1g-dev
      - unzip
      - sqlite3
      - wget
    state: present

- name: "Download bagconv source code"
  ansible.builtin.git:
    repo: "{{ bagserv_repo_url }}"
    dest: "{{ bagserv_install_path }}"
    force: "{{ bagserv_force_clone }}"
    version: "{{ bagserv_version }}"
    accept_newhostkey: true
  register: git_checkout

- name: "Build bagconv"
  ansible.builtin.shell:
    chdir: "{{ bagserv_install_path }}"
    cmd: "cmake . && make"
  when: git_checkout.changed

- name: "Download XML dump"
  ansible.builtin.shell:
    chdir: "{{ bagserv_install_path }}"
    cmd: "./get-bag-xml.sh"
    # Don't re-download in the ansible role; we make a cron job for that.
    creates: "{{ bagserv_install_path }}/lvbag-extract-nl.zip"
  register: download_xml_dump
  changed_when: download_xml_dump.stdout != "No new BAG is available, not downloading again."

- name: "Generate database"
  ansible.builtin.shell:
    chdir: "{{ bagserv_install_path }}"
    cmd: "./make-database.sh"
    # Don't re-generate in the role; we make a cron job for it.
    creates: "{{ bagserv_install_path }}/bag.sqlite"

- name: "Install service file"
  ansible.builtin.template:
    src: bagserv.service.j2
    dest: "{{ systemd_service_install_dir }}/bagserv.service"
    owner: root
    group: root
    mode: u=r,g=r,o=r
  notify: "Enable and update systemd service"